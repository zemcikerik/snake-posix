@startuml

skinparam ranksep 50
skinparam linetype ortho

struct input_callbacks_t {
{field} + on_arrow_press: void (*)(uint16_t, void*)
{field} + on_exit_press: void (*)(void*)
{field} + on_pause_press: void (*)(void*)
{field} + on_unpause_press: void (*)(void*)
{field} + on_respawn_press: void (*)(void*)
{field} + on_resize: void (*)(void*)
+ ctx_: void*
}

class input_t {
- thread_: pthread_t
- callbacks_: input_callbacks_t
- shutdown_: atomic_bool

{static} + input_init_sig(): void
{static} + input_init(self: input_t*, callbacks: input_callbacks_t*): void
{static} + input_destroy(self: input_t*): void
{static} - noop(signal: int): void
{static} - input_main(arg: void*): void*
}
input_t *-- input_callbacks_t

enum terminal_read_result_t {
+ READ_CANCELLED
+ READ_EMPTY
+ READ_INVALID
+ READ_SUCCESS
}

struct coordinates_t

class terminal_t <<utility>> {
{static} + terminal_read_string(coordinates: coordinates_t, buffer: char*): terminal_read_result_t
{static} + terminal_read_coordinate(coordinates: coordinates_t, out_coordinate: coordinate_t*): terminal_read_result_t
{static} + terminal_read_hostname(coordinates: coordinates_t, buffer: char*):
{static} + terminal_read_port(coordinates: coordinates_t, out_port: unsigned short*): terminal_read_result_t
{static} + terminal_show_info(message: const char*): void
{static} + terminal_show_error(message: const char*): void
{static} - terminal_update_relative_cell(coordinates: coordinates_t, character: char, index: size_t): void
{static} - terminal_erase_relative_cell(coordinates: coordinates_t, index: size_t): void
{static} - terminal_read(coordinates: coordinates_t, buffer: char*, read_letters: bool): bool
{static} - terminal_wait_for_key_press(): void
{static} - terminal_show_notif(message: const char*, color: uintattr_t): void
}
terminal_t ..> coordinates_t : <<uses>>

struct game_settings_t

class server_launcher_t {
{static} - launched_signal_received: atomic_bool

{static} + server_launcher_init(): void
{static} + server_launcher_launch_server_process(settings: game_settings_t*): bool
{static} - server_launcher_on_launched_signal_received(ignored: const int): void
}
server_launcher_t ..> game_settings_t : <<uses>>

class shm_game_state_t
class ticker_observer_t
class player_manager_t
class renderer_t
class syn_map_t

struct shm_client_input_context_t {
+ player_manager_: player_manager_t*
+ player_id_: player_id_t
+ <<atomic>> player_status_: player_status_t*
+ <<atomic>> last_player_direction_: direction_t*
+ exit_: atomic_bool*
+ map_: syn_map_t*
+ renderer_: renderer_t*
}
note bottom of shm_client_input_context_t: Associations omitted for brevity

class shm_client_t {
{static} + shm_client_run(room_name: const char*): void
{static} - shm_client_update_renderer(change: const change_t*, ctx: void*): void
{static} - shm_client_on_arrow_press(arrow: uint16_t, arg: void*): void
{static} - shm_client_on_exit_press(arg: void*): void
{static} - shm_client_on_pause_press(arg: void*): void
{static} - shm_client_on_unpause_press(arg: void*): void
{static} - shm_client_on_respawn_press(arg: void*): void
{static} - shm_client_on_resize(arg: void*): void
}
shm_client_t ..> shm_client_input_context_t : <<uses>>
shm_client_t ..> shm_game_state_t : <<uses>>
shm_client_t ..> ticker_observer_t : <<uses>>
shm_client_t ..> player_manager_t : <<uses>>
shm_client_t ..> renderer_t : <<uses>>
shm_client_t ..> input_t : <<uses>>
shm_client_t ..> syn_map_t : <<uses>>

enum socket_client_state_t {
+ SOCKET_CLIENT_CONNECTING
+ SOCKET_CLIENT_PLAYING
+ SOCKET_CLIENT_FULL
+ SOCKET_CLIENT_GAME_ENDED
+ SOCKET_CLIENT_CONNECTION_ERROR
}

struct socket_client_input_context_t {
+ socket_: socket_t*
+ <<atomic>> last_direction_: direction_t*
+ exit_: atomic_bool*
+ renderer_: renderer_t*
+ map_: syn_map_t*
+ <<atomic>> last_status_: player_status_t*
}
note bottom of socket_client_input_context_t: Associations omitted for brevity

class socket_t
struct socket_message_t

class socket_client_t {
{static} + socket_client_run(hostname: const char*, port: in_port_t): void
{static} - socket_client_resize_signal(how: int): void
{static} - socket_client_ignore_resize_signal(): void
{static} - socket_client_restore_resize_signal(): void
{static} - socket_client_send_magic_bytes(socket: socket_t*): bool
{static} - socket_client_on_arrow_press(arrow: uint16_t, arg: void*): void
{static} - socket_client_on_exit_press(ctx: void*): void
{static} - socket_client_on_pause_press(ctx: void*): void
{static} - socket_client_on_unpause_press(ctx: void*): void
{static} - socket_client_on_respawn_press(ctx: void*): void
{static} - socket_client_on_resize(ctx: void*): void
}
socket_client_t ..> socket_client_input_context_t : <<uses>>
socket_client_t ..> syn_map_t : <<uses>>
socket_client_t ..> renderer_t : <<uses>>
socket_client_t ..> input_t : <<uses>>
socket_client_t ..> socket_t : <<uses>>
socket_client_t ..> socket_message_t : <<uses>>

@enduml