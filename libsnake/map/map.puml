@startuml

skinparam ranksep 50
skinparam linetype ortho

struct coordinates_t

enum map_tile_type_t {
+ TILE_EMPTY
+ TILE_PLAYER
+ TILE_FRUIT
+ TILE_WALL
+ TILE_DEAD
}

struct map_tile_t {
+ order_: size_t
+ type_: map_tile_type_t
+ player_: player_id_t
}

class map_template_t {
- walls_: bool[MAX_MAP_HEIGHT][MAX_MAP_WIDTH]
- width_: coordinate_t
- height_: coordinate_t

{static} + map_template_init(self: map_template_t*, width: coordinate_t, height: coordinate_t): void
{static} + map_template_has_wall(self: const map_template_t*, coordinates: coordinates_t): bool
{static} + map_template_set_wall(self: map_template_t*, coordinates: coordinates_t): void
{static} + map_template_get_width(self: const map_template_t*): coordinate_t
{static} + map_template_get_height(self: const map_template_t*): coordinate_t
}

class map_t {
- tiles_t: map_tile_t[MAX_MAP_HEIGHT][MAX_MAP_WIDTH]
- width_: coordinate_t
- height_: coordinate_t

{static} + map_init(self: map_t*, width: coordinate_t, height: coordinate_t): void
{static} + map_init_from_template(self: map_t*, template: const map_template_t*): void
{static} + map_get_width(self: const map_t*): coordinate_t
{static} + map_get_height(self: const map_t*): coordinate_t
{static} + map_get_tile_state(self: const map_t*, coordinates: coordinates_t): map_tile_t
{static} + map_is_tile_empty(self: const map_t*, coordinates: coordinates_t): bool
{static} + map_is_tile_dead(self: const map_t*, coordinates: coordinates_t): bool
{static} + map_set_tile_empty(self: map_t*, coordinates: coordinates_t): void
{static} + map_set_tile_player(self: map_t*, coordinates: coordinates_t, player: player_id_t, order: size_t): void
{static} + map_set_tile_fruit(self: map_t*, coordinates: coordinates_t): void
{static} + map_set_tile_wall(self: map_t*, coordinates: coordinates_t): void
{static} + map_set_tile_dead(self: map_t*, coordinates: coordinates_t): void
{static} + map_mark_player_as_dead(self: map_t*, player: player_id_t, start_coordinates: coordinates_t): void
{static} + map_move_in_direction(self: const map_t*, coordinates: coordinates_t, direction: direction_t): coordinates_t
{static} + map_find_player_neighbor_with_lowest_order(self: const map_t*, player: player_id_t,coordinates: coordinates_t, out_coordinates: coordinates_t*): bool
{static} + map_find_empty_neighbor(self: const map_t*, coordinates: coordinates_t, out_coordinates: coordinates_t*, out_direction: direction_t*): bool
{static} + map_find_random_matching_predicate(self: const map_t*, predicate: map_tile_predicate_t, out_coordinates: coordinates_t*): bool
{static} - map_find_random_matching_predicate_search(data: map_search_data_t*, coordinates: coordinates_t): bool
}
map_t *-- map_tile_t
map_t ..> map_template_t : <<use>>
map_t ..> coordinates_t : <<use>>

struct map_search_data_t {
+ map_: map_t*
+ predicate_: map_tile_predicate_t
+ out_coordinates_: coordinates_t*
+ visited: bool*
}
map_t ..> map_search_data_t : <<use>>

class syn_T<T>

class syn_map_t
syn_map_t --|> syn_T
map_t --* syn_map_t

@enduml